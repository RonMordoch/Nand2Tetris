// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array str;
    field int max_length;
    field int length;


    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0)
        {
            let max_length = 1;
        }
        else
        {
            let max_length = maxLength;
        }
        let str = Array.new(max_length);
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < max_length)
        {
            let str[length] = c;
            let length = length + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0){
            let length = length - 1;
        }
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int v, i, d, sign;

        let v = 0;
        let i = 0;
        let sign = 1;
        if (str[0] = 45){ // '-'
            let i = 1;
            let sign = -1;
        }
        while (i < length){
            if ((47 < str[i]) & ( str[i] < 58)){
                let d = str[i] - 48; // d = char - '0'
                let v = Math.multiply(v,10) + d;
            }
            else
            {
                if (sign < 0)
                {
                    return -v;
                }
                else
                {
                return v;
                }
            }
            let i = i + 1;
        }
        if (sign < 0)
        {
            return -v;
        }
        else
        {
        return v;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        if (length > 0)
        {
            let length = 0;
        }
        if (val < 0){
            do appendChar(45); // '-' = 45
            let val = Math.abs(val);
        }
        do set_int_helper(val);
        return;
        }

    /** A recursive helper function to set int. */
    method void set_int_helper(int val){
        var int last_digit, c;

        let last_digit = val - (10 * Math.divide(val, 10));
        let c = last_digit + 48;
        if (val < 10)
        {
            do appendChar(c);
        }
        else
        {
        do set_int_helper(val/10);
        do appendChar(c);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}