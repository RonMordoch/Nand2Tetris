// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array two_to_the;
    static int qy2;

    /** Initializes the library. */
    function void init() {
        var int i;

        let qy2 = 0;
        let two_to_the = Array.new(16);
        let i = 1;
        let two_to_the[0] = 1;

        while (i<16){
            let two_to_the[i] = two_to_the[i-1] + two_to_the[i-1];
            let i = i + 1;
        }
        return;

    }

    /** Returns two to the power of the given parameter. */
    function int two_to_the(int power)
    {
        return two_to_the[power];
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0){
            let x = -x;
        }
        return x;
    }

    /** Returns true if the i'th bit of x is 1; false otherwise. */
    function boolean bit(int x, int i){
        return (~((x & two_to_the[i]) = 0));
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shifted_x,j;
        let sum = 0;
        let shifted_x = x;
        let j = 0 ;

        while (j < 16){
            if (Math.bit(y,j)){
                let sum = sum + shifted_x;
            }
            let shifted_x = shifted_x + shifted_x;
            let j = j + 1;
        }
        return sum;
    }

    /** Recursive helper function for division.*/
    function int divide_helper(int x, int y){
        var int q;

       if ((y > x) | (y < 0)){
		let qy2 = 0;
            return 0;
       }

        let q = Math.divide_helper(x, y + y);

        if ((x - qy2) < y){
            return (q + q);
        }
        else
        {

		let qy2 = qy2 + y;
		return (q + q + 1);
        }
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int sign, q;

        let sign = 1;
        if (((x < 0) & (y >0)) | ((x > 0) & (y < 0))){
            let sign = -1;
        }

        let x = Math.abs(x);
        let y = Math.abs(y);

        let q = Math.divide_helper(x,y);
        if (sign < 0){return -q;}
        return q;

    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y,j, temp, temp_squared;

        let y = 0;
        let j = 7;

        while (~(j < 0)){
            let temp = y + two_to_the[j];
            let temp_squared = Math.multiply(temp, temp);
            if ((~(temp_squared > x)) & temp_squared > 0){
                let y = temp;
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b){
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b){
            return a;
        }
        return b;
    }

    /** Divides the number x by two to the power of n. */
    function int divide_by_two_to_the(int x, int n)
    {
        var int test, set, res;
        let set = 1;
        let test = two_to_the[n];
        while (~(test=0)){
            if ((x&test)=test){
                let res = res | set;
            }
            let test = test + test;
            let set = set + set;
        }
        return res;
    }

    /** Multiplies the number x by two to the power of n. */
    function int multiply_by_two_to_the(int x, int n)
    {
        var int i;
        let i = 0;
        while (i < n)
        {
            let x = x + x;
            let i = i + 1;
        }
        return x;
    }
}