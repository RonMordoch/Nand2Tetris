// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static int screen_base;
    static boolean color;


    /** Initializes the Screen. */
    function void init() {
        let screen_base = 16384;
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;

        do Screen.setColor(false);
        let i = screen_base;
        while ( i < 24576 ) // Keyboard ram
        {
            do Memory.poke(i, color);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, x_mod_16, temp;

        let address = Math.multiply_by_two_to_the(y, 5) + Math.divide_by_two_to_the(x, 4);
        let value = Memory.peek(screen_base + address);
        let x_mod_16 = x & 15;

        if (color)
        {
            let value = value | Math.two_to_the(x_mod_16);
        }
        else
        {
            let temp = -1 - Math.two_to_the(x_mod_16);
            let value = value & temp;
        }
        do Memory.poke(screen_base + address,value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, diff,start_x;

        let a = 0;
        let b = 0;
        let dx = x2 - x1;
        if (dx < 0)
        {
            do Screen.drawLine(x2,y2,x1,y1);
            return;
        }
        let dy = y2 - y1;
        let diff = (a * dy) - (b * dx);

        if (dy = 0)
        {
            do Screen.drawHorizontalLine(x1, x2, y1);
            return;
        }
        if (dx = 0)
        {
            do Screen.drawVerticalLine(y1, y2, x1);
            return;
        }
        if (dy < 0)
        {
            while ( (~(a > dx)) & (b > dy) )
                {
                    do Screen.drawPixel(x1+a, y1+b);
                    if (diff < 0)
                    {
                        let a = a + 1;
                        let diff = diff - dy;
                    }
                    else
                    {
                        let b = b - 1;
                        let diff = diff - dx;
                    }
                }
        }
        else
        {
            while ( (~(a > dx)) & (~(b > dy)) )
            {
                do Screen.drawPixel(x1+a, y1+b);
                if (diff < 0)
                {
                    let a = a + 1;
                    let diff = diff + dy;
                }
                else
                {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
        }
        return;
    }

    /** Draws an horizontal line from x1-to-x2 with height y. */
    function void drawHorizontalLine(int x1, int x2, int y)
    {
       var int a, length,address, end_address, start,end;
//
      let length = x2 - x1;
      if (length < 0)
      {
           let length = -length;
           let start = x2;
           let end = x1;
      }
      else
      {
           let start = x1;
           let end = x2;
      }

       while (((start&15)>0))
       {
            do Screen.drawPixel(start,y);
            let start = start + 1;
            if (start = end)
            {
                return;
            }
       }

       let address = Math.multiply_by_two_to_the(y, 5) + Math.divide_by_two_to_the(start, 4);
       let end_address = Math.multiply_by_two_to_the(y, 5) + Math.divide_by_two_to_the(end, 4);

       while (~(address = end_address))
       {
            do Memory.poke(screen_base + address,color);
            let address = address + 1;
       }

       while (((end&15)>0))
       {
            do Screen.drawPixel(end,y);
            let end = end - 1;
        }
        do Screen.drawPixel(end, y);

       return;
    }

    /** Draws a vertical line from y1 to y2. */
    function void drawVerticalLine(int y1, int y2, int x)
    {
       var int b, length, start;

      let b = 0;
      let length = y2 - y1;
      if (length < 0)
      {
        let length = -length;
        let start = y2;
      }
      else
      {
        let start = y1;
      }
       while (~(b > length))
       {
         do Screen.drawPixel(x, start + b);
         let b = b + 1;
       }
       return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int i;
        let i = 0;
        while ((y1 + i) < y2)
        {
            do Screen.drawHorizontalLine(x1,x2, y1 + i);
            let i = i + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, dist;

        if (r > 181)
        {
          let r = 181;
        }
        let dy = (-r)+1;
        while ((dy < r))
        {
            let dist = Math.sqrt((r*r) - (dy * dy));
            do Screen.drawHorizontalLine(x - dist, x + dist, y+dy);
            let dy = dy + 1;
        }
        return;

    }
}